# CLI для итеративного Fibonacci.
# Важно: никакого вывода в горячем участке. INNER_REPS читаем из env.

import "std/cli"
import "std/env"

func fib_iter(n: u64) -> u64 {
    var a: u64 = 0
    var b: u64 = 1
    var i: u64 = 0
    while i < n {
        let t: u64 = a + b
        a = b
        b = t
        i = i + 1
    }
    return a
}

var sink_global: u64 = 0  # глобальный приёмник

func main(args: []string) -> i32 {
    var n: u64 = 90
    if len(args) > 1 {
        n = parse_u64(args[1])
    }

    let ir_env = getenv("INNER_REPS")
    var inner: u64 = 0
    if ir_env.ok {
        inner = parse_u64(ir_env.val)
    }

    if inner == 0 {
        sink_global = sink_global ^ fib_iter(n)
    } else {
        var s: u64 = 0
        var i: u64 = 0
        while i < inner {
            s = s ^ fib_iter(n)
            i = i + 1
        }
        sink_global = sink_global ^ s
    }

    # По умолчанию — без вывода.
    let ps = getenv("PRINT_SINK")
    if ps.ok && ps.val == "1" {
        println_u64(sink_global)
    }
    return 0
}